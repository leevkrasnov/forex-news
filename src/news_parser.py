import requests
from bs4 import BeautifulSoup
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

COUNTRY_FLAGS = {
    "–°–®–ê": "üá∫üá∏", "–ï–≤—Ä–æ–∑–æ–Ω–∞": "üá™üá∫", "–ö–∏—Ç–∞–π": "üá®üá≥", "–Ø–ø–æ–Ω–∏—è": "üáØüáµ",
    "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è": "üá¨üáß", "–ö–∞–Ω–∞–¥–∞": "üá®üá¶", "–ê–≤—Å—Ç—Ä–∞–ª–∏—è": "üá¶üá∫", "–ì–µ—Ä–º–∞–Ω–∏—è": "üá©üá™",
    "–§—Ä–∞–Ω—Ü–∏—è": "üá´üá∑", "–ò—Ç–∞–ª–∏—è": "üáÆüáπ", "–®–≤–µ–π—Ü–∞—Ä–∏—è": "üá®üá≠", "–†–æ—Å—Å–∏—è": "üá∑üá∫",
    "–ò–Ω–¥–∏—è": "üáÆüá≥", "–ë—Ä–∞–∑–∏–ª–∏—è": "üáßüá∑", "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è": "üá∞üá∑", "–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è": "üá≥üáø",
    "–ò—Å–ø–∞–Ω–∏—è": "üá™üá∏"
}
DEFAULT_FLAG = "üåç"

def get_forex_news():
    url = "https://ru.investing.com/economic-calendar/"
    headers = {"User-Agent": "Mozilla/5.0"}
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        news_list = []
        rows = soup.select('tr.js-event-item')

        for row in rows:
            time = row.get('data-event-datetime', "")
            title = row.select_one('td.event').get_text(strip=True)
            country_element = row.select_one('td.flagCur span.ceFlags')
            country = country_element['title'] if country_element else ""
            stars = row.select('i.grayFullBullishIcon')

            fact_element = row.select_one('td.act')
            fact = fact_element.get_text(strip=True) if fact_element and fact_element.get_text(strip=True) else "n/a"
            forecast_element = row.select_one('td.fore')
            forecast = forecast_element.get_text(strip=True) if forecast_element and forecast_element.get_text(strip=True) else "n/a"
            previous_element = row.select_one('td.prev')
            previous = previous_element.get_text(strip=True) if previous_element and previous_element.get_text(strip=True) else "n/a"

            if len(stars) >= 2:
                try:
                    formatted_time = datetime.strptime(time, '%Y/%m/%d %H:%M:%S').strftime('%H:%M')
                except ValueError:
                    formatted_time = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è"

                news_list.append({
                    'time': formatted_time,
                    'country': country,
                    'title': title,
                    'fact': fact,
                    'forecast': forecast,
                    'previous': previous,
                    'importance': len(stars)
                })
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        return news_list
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

def format_news(news):
    flag = COUNTRY_FLAGS.get(news['country'], DEFAULT_FLAG)
    importance = "‚≠ê" * news['importance']
    return (
        f"üï∞ <b>{news['time']}</b>    {importance}\n"
        f"{flag} <b>{news['country']}</b>\n"
        f"üìã <i>{news['title']}</i>\n"
        f"–§–∞–∫—Ç: {news['fact']} | –ü—Ä–æ–≥–Ω–æ–∑: {news['forecast']} | –ü—Ä–µ–¥: {news['previous']}\n"
    )