import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.exceptions import TelegramRetryAfter
from src.news_parser import get_forex_news, format_news
from src.ai_generator import generate_comment, generate_educational_tip
from datetime import datetime
import logging
from aiohttp import ClientConnectorError

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
RUSSIAN_MONTHS = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

def setup_bot():
    from src.config import BOT_TOKEN, GROUP_ID
    if not BOT_TOKEN or not GROUP_ID:
        logger.error("BOT_TOKEN –∏–ª–∏ GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã BOT_TOKEN –∏ GROUP_ID")
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()
    return bot, dp

async def split_message(full_text, max_length=4096):
    messages = []
    current_message = ""
    for line in full_text.split("\n"):
        if len(current_message) + len(line) + 1 <= max_length:
            current_message += line + "\n"
        else:
            messages.append(current_message.strip())
            current_message = line + "\n"
    if current_message.strip():
        messages.append(current_message.strip())
    return messages

async def send_news_to_telegram(bot: Bot):
    from src.config import GROUP_ID
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
        news_list = get_forex_news()
        if not news_list:
            for attempt in range(3):
                try:
                    await bot.send_message(chat_id=GROUP_ID, text="–ù–æ–≤–æ—Å—Ç–µ–π —Å –≤—ã—Å–æ–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode='HTML')
                    logger.info("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    break
                except (ClientConnectorError, TelegramRetryAfter) as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    await asyncio.sleep(5 if isinstance(e, ClientConnectorError) else e.retry_after)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º –±–µ–∑ –ª–æ–∫–∞–ª–∏
        today = datetime.now()
        day = today.day
        month = RUSSIAN_MONTHS[today.month]
        year = today.year
        current_date = f"{day} {month} {year}"
        full_text = f"<b>üîó –°–æ–±—ã—Ç–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ {current_date}</b>\n\n"

        for news in news_list:
            formatted = format_news(news)
            comment = await generate_comment(news)
            tip = await generate_educational_tip(news)

            block = f"{formatted}\nüí¨ <i>{comment}</i>\n\n"
            if tip:
                block += f"üìò {tip}\n"
            block += "------------------------------\n\n"
            full_text += block

        messages = await split_message(full_text)
        for message in messages:
            for attempt in range(3):
                try:
                    await bot.send_message(chat_id=GROUP_ID, text=message, parse_mode='HTML')
                    await asyncio.sleep(1)
                    logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    break
                except TelegramRetryAfter as e:
                    logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram. –ñ–¥—É {e.retry_after} —Å–µ–∫.")
                    await asyncio.sleep(e.retry_after)
                except ClientConnectorError as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                    await asyncio.sleep(5)
                    if attempt == 2:
                        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")

async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –Ω–æ–≤–æ—Å—Ç—è–º –ø–æ —Ä—ã–Ω–∫—É Forex.")